#include <semaphore.h>
#include <stdlib.h>
#include <malloc.h>
#include <sys/types.h>
//#include <sys/wait.h>
#include <signal.h>
#include <sched.h>
#include <stdio.h>
#include <pthread.h>

#define _OPEN_THREADS
#define FIBER_STACK 1024*64
//#define NUM_THREADS 100
#define _GNU_SOURCE

//sem_t sem;

static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
struct c {
int saldo;
};
typedef struct c conta;

conta from, to;
int valor;

// The child thread will execute this function

void * transferencia(void *arg){
    //int sem_wait(sem_t *sem);
    pthread_mutex_lock(&mutex);

    if (from.saldo >= valor){
        from.saldo -= valor;
        to.saldo += valor;
    //int sem_post(sem_t sem);
    }
        printf("Saldo de c1: %d / Saldo de c2: %d / Transferência concluída com sucesso!\n",from.saldo, to.saldo );
pthread_mutex_unlock(&mutex);

}

int main(){
    const int NUM_THREADS=100;
    pthread_t newthread[NUM_THREADS];
    void *stack;
    pid_t pid;
    int i;

// Allocate the stack
    stack = malloc( FIBER_STACK );
stack = malloc( FIBER_STACK );
    if ( stack == 0 )
    {
        perror("malloc: could not allocate stack");
        exit(1);
    }

// Todas as contas começam com saldo 100
    from.saldo = 100;
    to.saldo = 100;
    printf( "Transferindo 10 para a conta c2\n" );
    valor = 10;

    for (i = 0; i < NUM_THREADS; i++) {

        pid = pthread_create(&newthread[i], NULL, transferencia, "thread 1");
        if ( pid == -1 ){
            perror( "Erro durante a criação do thread." );
            exit(2);
        }
        printf("A thread %lu foi criada\n\n", newthread[i]);
    }

// Free the stack
free( stack );
printf("Transferências concluídas e memória liberada.\n");
return 0;
}

